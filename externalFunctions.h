#ifndef EXTERNAL_FUNCTIONS_H
#define EXTERNAL_FUNCTIONS_H

#include <vector>
#include <GL/glew.h>
#include <SFML/Window.hpp>
#include "VBOClass.h"
#include <fstream>
#include <string>
#include <istream>
#include <sstream>
#include <iostream>
#include <vector>
#include "globalVariables.h"


typedef unsigned int uint;

namespace functions {
	/*
	Generates cube and with binding
	to specific buffer
	param - buffer sent to bind
	*/
	void cube(GLuint buffer);
	/*
	Generates cube and with binding
	to vertex buffer object
	param - vbo sent to bind
	*/
	void cube(VertexBufferObject& vbo);
	/*
	Setting camera with taken input from keyboard
	arrows up, down, right, left
	*/
	void setCamera(GLint _uView);
	/*
	drawing circle
	param - size of vertices array
	*/
	void circle(int verticesSize);
	/*
	Setting camera based on mouse movement
	param - uni view
	param - time elapsed from last mouse move
	param - window generated by SFML
	*/
	void setCameraMouse(GLint uniView, float elapsedTime, const sf::Window& window);
	/*
	Setting camera with taken input from keyboard
	arrows up, down, right, left
	param - uni view
	param - time elapsed from last reading
	*/
	void setCameraKeyboard(GLint uniView, float elapsedTime);
	/*
	Changing projection based on 
	params
	*/
	void stereoProjection(GLuint shaderProgram_, float _left, float _right, float _bottom, float _top, float _near, float _far, float _zero_plane, float _dist, float _eye);
	/*
	Bindig textures to generated cube
	params - self described
	*/
	void generateCubeTextures(int primitive, uint texture1, uint texture2, uint texture3);
	/*
	Loading model from .obj file using one buffer
	and binding it to e.g. vertex buffer object 
	param - reference to amount of points
	param - path to .obj file with saved model
	param - vertex buffer object
	*/
	void loadModelObj(int& punkty_, const char* filename, int buffer);
	/*
	Loading model from .obj file using two buffers
	and binding it to them e.g. VBO and EBO
	param - reference to amount of points
	param - path to .obj file with saved model
	param - vertex buffer object
	param - element buffer object
	*/
	void loadModelObj_EBO(int& punkty_, const char* filename, int buffer_vbo, int buffer_ebo);
	/*
	Loading model from .obj file using one buffer with normals
	and binding it to e.g. vertex buffer object
	param - reference to amount of points
	param - path to .obj file with saved model
	param - vertex buffer object
	param - reference to 2D vector to which we save coords of model objects
	*/
	bool loadModelOBJNormalsCoord(int& punkty_, const char* filename, int buffer, std::vector<std::vector<int>>& objects);
	/*
	Binding textures to loaded model
	param - primitive
	param - vector with loaded textures
	param - vector in which coordinates of model objects are saved
	*/
	void bindTextureModel(GLint _primitive, std::vector<unsigned int>& _textures, std::vector<std::vector<int>>& _objects);
}

#endif // !EXTERNAL_FUNCTIONS_H